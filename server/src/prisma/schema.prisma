datasource db {
  provider = "mongodb"
  url      = env("MONGO_CLIENT")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String  @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  messages      Message[]
  convos        convoParticipants[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier    String
  token         String   @unique
  expires       DateTime

  @@unique([identifier, token])
}

//Conversation Model
model Convo {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  latestMessageId     String?   @unique
  latestMessage       Message?  @relation(name: "latestConvoMessage", fields: [latestMessageId], references: [id], onUpdate:NoAction, onDelete:NoAction)
  messages            Message[]
  participants        convoParticipants[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model convoParticipants {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String
  hasSeenlatestMessage     Boolean 
  user                     User      @relation(fields: [userId], references: [id])
  ConvoIds                 String
  convos                   Convo     @relation(fields: [ConvoIds], references: [id])
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

}

model Message {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  ConvoId       String
  senderId      String
  convo         Convo     @relation(fields: [ConvoId], references: [id])
  sender        User      @relation(fields: [senderId], references: [id])
  isLatest      Convo?    @relation(name: "latestConvoMessage")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}